generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  name       String
  password   String
  admin      Boolean
  photo      String 
  phone      String
  birthday   DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  carrinho   Carrinho?
  pedidos    Pedido[]

  @@map("users")
  @@index([email])
  @@index([created_at])
}

model Produto {
  id            String    @id @default(uuid())
  name          String    @unique
  descricao     String
  preco         Float
  quantidade    Int
  fotoPrincipal String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  imagens       Imagem[] @relation("ProdutoImagens")
  carrinhos     CarrinhoProduto[]
  pedidos       PedidoProduto[]

  @@map("produto")
  @@index([preco])
  @@index([quantidade])
}

model Imagem {
  id         String   @id @default(uuid())
  url        String   
  idProduto  String   
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  produto    Produto  @relation("ProdutoImagens", fields: [idProduto], references: [id], onDelete: Cascade)

  @@map("imagem")
  @@index([idProduto])
}

model Carrinho {
  id         String     @id @default(uuid())
  idUsuario  String @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  user       User       @relation(fields: [idUsuario], references: [id])
  produtos   CarrinhoProduto[]

  @@map("carrinho")
  @@index([idUsuario])
}

model CarrinhoProduto {
  idCarrinho  String
  idProduto   String
  quantidade  Int      @default(1)
  descricao   String   // Descrição do produto
  fotoPrincipal String // Foto principal do produto
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  carrinho    Carrinho @relation(fields: [idCarrinho], references: [id], onDelete: Cascade)
  produto     Produto  @relation(fields: [idProduto], references: [id], onDelete: Cascade)

  @@id([idCarrinho, idProduto])
  @@map("carrinho_produto")
  @@index([idCarrinho, idProduto])
}


model Pedido {
  id         String     @id @default(uuid())
  idUsuario  String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  produtos   PedidoProduto[]

  user       User       @relation(fields: [idUsuario], references: [id])

  @@map("pedido")
  @@index([id])
  @@index([idUsuario])
  @@index([created_at]) // Índice para buscas rápidas por data
}

model PedidoProduto {
  idPedido   String
  idProduto  String
  quantidade Int      @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  pedido     Pedido   @relation(fields: [idPedido], references: [id], onDelete: Cascade)
  produto    Produto  @relation(fields: [idProduto], references: [id], onDelete: Cascade)

  @@id([idPedido, idProduto])
  @@map("pedido_produto")
  @@index([idPedido, idProduto])
}
